name: Security Scan Pipeline

on:
  push: 
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'

jobs: 
  security-scan:
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read
      contents: write
      pull-requests: write

    steps:

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Test-for-Devsecops/requirements.txt
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        output: sarif-results
        upload: false
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-results.json || true

    - name: Start local server for DAST
      run: |
        cd src
        python -m http.server 5000 &
        sleep 10

    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:5000'
        cmd_options: '-a -j -m 2 -T 5'
        artifact_name: 'zap_report'

    - name: Merge security results
      run: |
        python scripts/parse_sarif.py

    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          merged-results.json
          sarif-results/

    - name: Check for vulnerabilities
      id: check-vulns
      run: |
        if [ -s merged-results.json ]; then
          echo "vulns_found=true" >> $GITHUB_OUTPUT
        else
          echo "vulns_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Trigger AI Remediation
      if: steps.check-vulns.outputs.vulns_found == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ai-remediation.yml',
            ref: context.ref
          })
