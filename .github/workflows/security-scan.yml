name: Security Scan Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}  # Use PAT for checkout
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        output: sarif-results
        upload: false
    - name: Run Safety check
      run: |
        safety check --json --output safety-results.json || true
    - name: Install ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok-v3-stable-linux-amd64.tar.gz | tar xz
        sudo mv ngrok /usr/local/bin/ngrok
        ngrok version
    - name: Start local server for DAST
      run: |
        cd src
        python -m http.server 5000 --bind 127.0.0.1 --header "Server: WebServer" &
        sleep 10
        ngrok http 5000 &
        sleep 10
        export ZAP_TARGET=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "ZAP_TARGET=$ZAP_TARGET" >> $GITHUB_ENV
    - name: Run OWASP ZAP Scan
      run: |
        touch report_json.json report_md.md report_html.html
        chmod a+w report_json.json report_md.md report_html.html
        docker run -v $(pwd):/zap/wrk/:rw --network=host -t ghcr.io/zaproxy/zaproxy:stable \
          zap-full-scan.py -t ${{ env.ZAP_TARGET }} -J report_json.json -w report_md.md -r report_html.html -a -j -m 2 -T 5
    - name: Verify ZAP report files
      run: |
        ls -l report_json.json report_md.md report_html.html || { echo "ZAP report files missing"; exit 1; }
    - name: Upload ZAP reports
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: |
          report_json.json
          report_md.md
          report_html.html
    - name: Merge security results
      run: |
        python scripts/parse_sarif.py
    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          merged-results.json
          sarif-results/
    - name: Check for vulnerabilities
      id: check-vulns
      run: |
        if [ -s merged-results.json ]; then
          echo "vulns_found=true" >> $GITHUB_OUTPUT
        else
          echo "vulns_found=false" >> $GITHUB_OUTPUT
        fi
    - name: Trigger AI Remediation
      if: steps.check-vulns.outputs.vulns_found == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ai-remediation.yml',
            ref: context.ref
          })
