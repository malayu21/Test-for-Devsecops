name: Security Scan Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found or invalid, skipping pip install"
          pip install safety

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform SAST CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: sarif-results
          upload: false
          
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Upgrade safety
        run: pip install --upgrade safety

      - name: Run Dependency Scanning
        run: |
          echo "Running safety check..."
          if [ -s requirements.txt ]; then
            echo "Contents of requirements.txt:"
            cat requirements.txt
            safety check --output json > safety-results.json 2> safety-error.log || { echo "Safety check failed, see error log:"; cat safety-error.log; exit 1; }
          else
            echo "No requirements.txt found, creating empty safety-results.json"
            echo '{"vulnerabilities": []}' > safety-results.json
          fi
          ls -l safety-results.json || { echo "Failed to create safety-results.json"; exit 1; }
          cat safety-results.json

      - name: Install ngrok
        run: |
          curl -s -o ngrok.tar.gz https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tar.gz
          tar -xzf ngrok.tar.gz || { echo "Failed to extract ngrok.tar.gz"; exit 1; }
          sudo mv ngrok /usr/local/bin/ngrok
          rm ngrok.tar.gz
          ngrok version || { echo "ngrok installation failed"; exit 1; }

      - name: Configure ngrok authtoken
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Create ngrok configuration
        run: |
          cat > ngrok.yml <<EOF
          version: "2"
          authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
          tunnels:
            app:
              proto: http
              addr: 5000
          EOF

      - name: Start local server for DAST
        run: |
          cd src
          python -m http.server 5000 --bind 127.0.0.1 &
          sleep 10
          ngrok start --all --config ../ngrok.yml &
          sleep 10
          export ZAP_TARGET=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.name == "app") | .public_url')
          if [ -z "$ZAP_TARGET" ]; then
            echo "Failed to get ngrok tunnel URL"
            exit 1
          fi
          echo "ZAP_TARGET=$ZAP_TARGET" >> $GITHUB_ENV

      - name: Run DAST OWASP ZAP Scan
        run: |
          touch report_json.json report_md.md report_html.html
          chmod a+w report_json.json report_md.md report_html.html
          docker run -v $(pwd):/zap/wrk/:rw --network=host -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t ${{ env.ZAP_TARGET }} -J report_json.json -w report_md.md -r report_html.html -a -j -m 2 -T 5 -I || true

      - name: Verify ZAP report files
        run: |
          ls -l report_json.json report_md.md report_html.html || { echo "ZAP report files missing"; exit 1; }

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_json.json
            report_md.md
            report_html.html

      - name: Verify merge inputs
        run: |
          echo "Checking input files for parse_sarif.py..."
          ls -l sarif-results/python.sarif || { echo "CodeQL SARIF file missing"; exit 1; }
          ls -l report_json.json || { echo "ZAP JSON report missing"; exit 1; }
          ls -l safety-results.json || { echo "Safety JSON report missing"; exit 1; }

      - name: Merge SAST, Dependencies Scan, DAST results
        run: |
          mkdir -p security-results
          python scripts/parse_sarif.py || { echo "Failed to merge security results"; exit 1; }
          ls -l security-results/merged-results.json || { echo "Merged results file not created"; exit 1; }
          cat security-results/merged-results.json

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: security-results/merged-results.json
          retention-days: 7

      - name: Check for vulnerabilities
        id: check-vulns
        run: |
          if [ -s security-results/merged-results.json ]; then
            echo "vulns_found=true" >> $GITHUB_OUTPUT
          else
            echo "vulns_found=false" >> $GITHUB_OUTPUT
          fi
